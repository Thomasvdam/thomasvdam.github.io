{"version":3,"sources":["webpack:///./src/templates/listing/categoryListing.tsx","webpack:///./src/components/button/button.tsx","webpack:///./src/components/postPreview/postPreview.tsx","webpack:///./src/templates/listing/listing.tsx"],"names":["CategoryListingTemplate","data","pageContext","path","linkTo","pageQuery","Button","children","className","$","button","PostPreview","date","slug","subject","tags","title","from","container","previewLink","to","state","map","tag","key","ListingTemplate","categoryRaw","category","currentPage","totalPages","previousPage","nextPage","charAt","toUpperCase","slice","edges","allMarkdownRemark","back","postsContainer","edge","node","fields","frontmatter","listingPreview","footer","link"],"mappings":"0FACA,8EAQeA,UAJiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,KAAtB,OAC5B,kBAAC,IAAD,CAAiBF,KAAMA,EAAMC,YAAaA,EAAaC,KAAMA,EAAMC,OAAQ,mBAKxE,IAAMC,EAAY,a,0HCEVC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,4BAAQC,UAAWC,IAAEC,QAClBH,I,4CC0BUI,EAjBK,SAAC,GAAD,QAAGH,iBAAH,MAAe,GAAf,EAAmBI,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,KAAMC,EAA/B,EAA+BA,QAA/B,IAAwCC,YAAxC,MAA+C,GAA/C,EAAmDC,EAAnD,EAAmDA,MAAOC,EAA1D,EAA0DA,KAA1D,OAChB,yBAAKT,UAAcC,IAAES,UAAP,IAAoBV,GAC9B,6BACI,kBAAC,OAAD,CAAMA,UAAWC,IAAEU,YAAaC,GAAE,IAAMP,EAAQQ,MAAO,CAAEJ,SACrD,wBAAIT,UAAWC,IAAEO,OAAO,kBAAC,IAAD,KAAqBA,KAEjD,kBAAC,IAAD,CAAWJ,KAAMA,IACjB,uBAAGJ,UAAWC,IAAEK,SACXA,IAGT,6BACKC,EAAKO,KAAI,SAAAC,GAAG,OAAK,kBAAC,IAAD,CAAUC,IAAKD,EAAKA,IAAKA,UCgDxCE,IAxCS,SAAC,GAA+C,IAA7CxB,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAC9BsB,EAAiExB,EAA3EyB,SAAuBC,EAAoD1B,EAApD0B,YAAaC,EAAuC3B,EAAvC2B,WAAYC,EAA2B5B,EAA3B4B,aAAcC,EAAa7B,EAAb6B,SAChEJ,EAAWD,EAAYM,OAAO,GAAGC,cAAgBP,EAAYQ,MAAM,GAC5CC,EAAYlC,EAAjCmC,kBAAqBD,MAE7B,OACI,kBAAC,IAAD,CAAQE,KAAMjC,GACV,kBAAC,IAAD,CAAKY,MAAOW,IACZ,4BAAKA,EAAL,UACA,yBAAKnB,UAAWC,IAAE6B,gBACbH,EAAMb,KAAI,SAACiB,GAAS,MACmEA,EAA5EC,KAAkB3B,EADT,EACD4B,OAAU5B,KADT,IACiB6B,YAAe9B,EADhC,EACgCA,KAAMG,EADtC,EACsCA,KAAMC,EAD5C,EAC4CA,MAAOF,EADnD,EACmDA,QAEpE,OAAO,kBAAC,EAAD,CACHN,UAAWC,IAAEkC,eACbnB,IAAKX,EACLD,KAAMA,EACNK,KAAMd,EACNY,KAAMA,EACNC,MAAOA,EACPH,KAAMA,EACNC,QAASA,QAIrB,yBAAKN,UAAWC,IAAEmC,QACbd,EACG,kBAAC,OAAD,CAAMtB,UAAWC,IAAEoC,KAAMzB,GAAIU,GAAc,kBAAC,EAAD,WACzC,+BACN,8BACKF,EADL,MACqBC,GAEpBE,EACG,kBAAC,OAAD,CAAMvB,UAAWC,IAAEoC,KAAMzB,GAAIW,GAAU,kBAAC,EAAD,WACrC","file":"component---src-templates-listing-category-listing-tsx-46bbd71dfdbe54b5ec3a.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport ListingTemplate from './listing';\n\nconst CategoryListingTemplate = ({ data, pageContext, path }) => (\n    <ListingTemplate data={data} pageContext={pageContext} path={path} linkTo={'/category/all'} />\n);\n\nexport default CategoryListingTemplate;\n\nexport const pageQuery = graphql`\nquery categoryPostsQuery($skip: Int!, $limit: Int!, $category: String!) {\n  allMarkdownRemark(\n    sort: { fields: [frontmatter___date], order: DESC }\n    limit: $limit\n    skip: $skip\n    filter: { frontmatter: { tags: { in: [$category] } } }\n  ) {\n    edges {\n      node {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          tags\n          subject\n        }\n      }\n    }\n  }\n}\n`;\n","import React from 'react';\nimport $ from './button.module.scss';\n\ntype props = {\n    children: React.ReactChild | React.ReactChild[];\n};\n\nconst Button = ({ children }: props) => (\n  <button className={$.button}>\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport $ from './postPreview.module.scss';\n\nimport DateLabel from '~/components/date/dateLabel';\nimport TagLabel from '~/components/tagLabel/tagLabel';\nimport FirstWordHighlight from '~/components/firstWordHighlight/firstWordHighlight';\n\ntype props = {\n    className?: string;\n    date: string;\n    from: string;\n    slug: string;\n    subject: string,\n    tags?: string[],\n    title: string,\n};\n\nconst PostPreview = ({ className = '', date, slug, subject, tags = [], title, from }: props) => (\n    <div className={`${$.container} ${className}`}>\n        <div>\n            <Link className={$.previewLink} to={`/${slug}`} state={{ from, }}>\n                <h3 className={$.title}><FirstWordHighlight>{title}</FirstWordHighlight></h3>\n            </Link>\n            <DateLabel date={date}/>\n            <p className={$.subject}>\n                {subject}\n            </p>\n        </div>\n        <div>\n            {tags.map(tag => (<TagLabel key={tag} tag={tag}/>))}\n        </div>\n    </div>\n);\n\nexport default PostPreview;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport $ from './listing.module.scss';\n\nimport Layout from '~/components/layout/layout';\nimport SEO from '~/components/seo';\nimport Button from '~/components/button/button';\nimport PostPreview from '~/components/postPreview/postPreview';\n\ntype props = {\n    data: {\n        allMarkdownRemark: {\n            edges: {\n                node: {\n                    fields: {\n                        slug: string;\n                    }\n                    frontmatter: {\n                        date: string;\n                        tags: string[],\n                        title: string,\n                        subject: string,\n                    },\n                },\n            }[];\n        }\n    };\n    pageContext: {\n        category: string;\n        currentPage: number;\n        totalPages: number;\n        previousPage: string | null;\n        nextPage: string | null;\n    },\n    path: string;\n    linkTo?: string;\n};\n\nconst ListingTemplate = ({ data, pageContext, path, linkTo }: props) => {\n    const { category: categoryRaw, currentPage, totalPages, previousPage, nextPage } = pageContext;\n    const category = categoryRaw.charAt(0).toUpperCase() + categoryRaw.slice(1);\n    const { allMarkdownRemark: { edges } } = data;\n\n    return (\n        <Layout back={linkTo}>\n            <SEO title={category}/>\n            <h2>{category} posts</h2>\n            <div className={$.postsContainer}>\n                {edges.map((edge) => {\n                    const { node: { fields: { slug }, frontmatter: { date, tags, title, subject } } } = edge;\n\n                    return <PostPreview\n                        className={$.listingPreview}\n                        key={slug}\n                        date={date}\n                        from={path}\n                        tags={tags}\n                        title={title}\n                        slug={slug}\n                        subject={subject}\n                    />;\n                })}\n            </div>\n            <div className={$.footer}>\n                {previousPage ?\n                    <Link className={$.link} to={previousPage}><Button>←</Button></Link>\n                    : <span/> }\n                <span>\n                    {currentPage} / {totalPages}\n                </span>\n                {nextPage ?\n                    <Link className={$.link} to={nextPage}><Button>→</Button></Link>\n                    : <span/>}\n            </div>\n        </Layout>\n    );\n};\n\nexport default ListingTemplate;\n"],"sourceRoot":""}